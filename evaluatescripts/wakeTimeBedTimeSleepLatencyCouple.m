clear all

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\dunch\Documents\MATLAB\evaluate\activite_1526.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/10/19 12:45:40

%% Initialize variables.
filename = 'C:\Users\dunch\Documents\MATLAB\evaluate\activite_1516.csv';
delimiter = ',';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
stampunix = cell2mat(raw(:, 1));
durations = cell2mat(raw(:, 2));
steps = cell2mat(raw(:, 3));
distancecm = cell2mat(raw(:, 4));
runState0not = cell2mat(raw(:, 5));
running = cell2mat(raw(:, 6));
sleepState = cell2mat(raw(:, 7));


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% convert unix timestamps to Matlab datetimes in local time zone
dt = datetime(stampunix, 'ConvertFrom', 'posixtime' );
dt = datetime(dt, 'TimeZone', 'UTC');
dt.TimeZone = 'local';
 
%% Get data for a few days to play with
startdate = datenum([2017 9 29 12 0 0]);
enddate = datenum([2017 10 2 12 0 0]);
i = find(datenum(dt) > startdate & datenum(dt) < enddate);
testdates = dt(i);
testsleep = sleepState(i);

figure
hold on
plot(testdates, testsleep)
plot(testdates, testsleep, '.')
ylim([-1 4])

% define noon for each date we have data
noon = datevec(testdates);
noon(:, 4) = 12;
noon(:, 5) = 0;
noon(:, 6) = 0;
noon = unique(datenum(noon));
noon(isnan(noon)) = [];
plot(noon, zeros(size(noon)), 'mo')

% find all the date stamps with nonzero sleep states
i = find(testsleep > 0);
sleepStamps = testdates(i);
sleepTime = [];
wakeTime = [];
for n = 1 : length(noon)
    % find all the data after this noon
    i = find(datenum(sleepStamps) > noon(n));
    afternoonStamps = sort(sleepStamps(i));
    i = find(datenum(sleepStamps) < noon(n));
    morningStamps = sort(sleepStamps(i));
    if ~isempty(afternoonStamps)
        sleepTime = [sleepTime afternoonStamps(1)];
    end
    if ~isempty(morningStamps)
        wakeTime = [wakeTime morningStamps(end)];

    end
end

for n = 1 : length(sleepTime)
    plot([sleepTime(n) sleepTime(n)], [-1 4], 'k')
end
% 
% for n = 1 : length(wakeTime)
%     plot([wakeTime(n) wakeTime(n)], [-1 4], 'g')
% end
% % find bedtimes (as opposed to sleep times) by looking for last activity
% % before falling asleep
% % find all the date stamps with nonzero sleep states
% i = find(testsleep == 0);
% activeStamps = testdates(i);
% bedTime = [];
% for n = 1 : length(sleepTime)
%     i = find(activeStamps < sleepTime(n));
%     beforeBed = sort(activeStamps(i));
%     bedTime = [bedTime beforeBed(end)];
% end
% for n = 1 : length(bedTime)
%     plot([bedTime(n) bedTime(n)], [-1 4], 'r')
% end
% 
% sleepLatency = (datenum(sleepTime) - datenum(bedTime))*24*60;
% 
% %%%%
% 
% 
% 



