%% masterScript
% This script generates a spreadsheet containing pages of collated
% information from the SMART survey.
% The script queries the user for the location of the CSV file downloaded
% from the Qualtrics website containing the raw data for the survey.
% The script also queries the Subjects database for information on survey
% respondants such as OADC number and uses a web-based query to collect
% information from a PHP script to collect information on mouse movements
% and typing times.
%% Input: 
% The input into the script is the Qualtrics raw data CVS file. The script
% also queries subjects_new.subjects table in the database. It also uses
% the following URL
% https://juno.orcatech.org/php/healthforms/loadFormsUserInputBySubjIdSurveyIdYearMonth.php
% to collect information about mouse movements and key presses.
%% Output:
% The script queries the user for an output filename and location in which
% to save. The Excel spreadsheet produced by the script contains the
% following pages:
% Memory Task: OADC, SubjectID, ResponseID, Date, Picture Displayed,
% Picture chosen, whether or not the correct picture was chosen
% Trails Task Time: OADC, SubjectID, ResponseID, StartDate, total amount of
% time spent on the trails task in seconds
% Mouse Metrics: OADC, SubjectID, Date, Delta, D, K, Time, Total number of
% clicks
% These mouse metrics are measured while the user is interacting with the
% trails test task
% Delta = straight line distance between mouse clicks
% D = actual distance travelled
% K = Delta/D, curvature
% Time = how long each mouse movement took in seconds
% Total clicks = the number of mouse clicks made during the entire trails
% test
% Typing Errors: OADC, SubjectID, ResponseID, StartDate, Motor1Err through
% Motor10Err
% The number of typing errors made in each of the ten text boxes. Number of
% errors is calculated using the Levenshtein distance algorithm
% Typing Times: OADC, SubjectID, ResponseID, Typing Time, Textbox, Words
% per Minute, Chars per Minute
% Typing time is how long the user interacted with the text box in seconds
% Textbox holds the number (such as text box #1) that was being typined
% into

%% Database connection
% Set up a connection to the subjects database for functions like looking
% up OADC numbers
import Orcatech.MySQL
import Orcatech.IdArray
import Orcatech.Databases.Subjects
import Orcatech.Databases.AlgorithmResults

o = Orcatech.Interface('dunch', '******');
MySQL.connect(Subjects.SERVER);

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\dunch\Documents\MATLAB\besmart\BESMART_FebOnly.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/03/06 10:33:45

%% Initialize variables.
% Choose a filename to open
[CSVfile, CSVpath] = uigetfile('*.csv', 'Open Qualtrics data');
filename = fullfile(CSVpath, CSVfile);

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\dunch\Documents\MATLAB\besmart\BESMART_FebOnly.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/03/06 11:22:21

%% Initialize variables.
delimiter = ',';
startRow = 3;

formatSpec = '%q%q%q%q%q%q%f%q%q%f%f%f%f%f%q%q%q%f%f%f%f%q%q%q%q%q%f%q%q%f%f%f%f%q%q%q%q%f%f%f%f%f%f%f%f%f%q%f%f%f%f%q%q%q%q%q%f%f%f%f%q%q%q%q%q%f%f%f%f%q%q%q%q%q%f%f%f%f%q%q%q%q%q%f%f%f%f%q%q%q%q%q%f%f%f%f%q%q%q%q%q%f%f%f%f%q%q%q%q%q%f%f%f%f%q%q%q%q%q%f%f%f%f%q%q%q%q%q%f%f%f%f%q%q%q%q%q%q%q%q%q%q%q%q%q%q%f%f%f%f%q%q%q%f%f%f%f%f%f%f%f%f%f%f%f%q%q%q%q%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%q%q%q%q%q%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r','n','UTF-8');
% Skip the BOM (Byte Order Mark).
fseek(fileID, 3, 'bof');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
V1 = dataArray{:, 1};
V2 = dataArray{:, 2};
V3 = dataArray{:, 3};
V4 = dataArray{:, 4};
V5 = dataArray{:, 5};
V6 = dataArray{:, 6};
V7 = dataArray{:, 7};
V8 = dataArray{:, 8};
V9 = dataArray{:, 9};
V10 = dataArray{:, 10};
SC0_0 = dataArray{:, 11};
SC0_1 = dataArray{:, 12};
SC0_2 = dataArray{:, 13};
SubjectID = dataArray{:, 14};
RecipientFirstName = dataArray{:, 15};
RecipientLastName = dataArray{:, 16};
Source = dataArray{:, 17};
Month = dataArray{:, 18};
Year = dataArray{:, 19};
ImageSet = dataArray{:, 20};
instructions = dataArray{:, 21};
meta_1_TEXT = dataArray{:, 22};
meta_2_TEXT = dataArray{:, 23};
meta_3_TEXT = dataArray{:, 24};
meta_4_TEXT = dataArray{:, 25};
meta_5_TEXT = dataArray{:, 26};
meta_6_TEXT = dataArray{:, 27};
meta_7_TEXT = dataArray{:, 28};
pd_instructions = dataArray{:, 29};
compass1 = dataArray{:, 30};
compass2 = dataArray{:, 31};
compass3 = dataArray{:, 32};
compass4 = dataArray{:, 33};
Q873_1 = dataArray{:, 34};
Q873_2 = dataArray{:, 35};
Q873_3 = dataArray{:, 36};
Q873_4 = dataArray{:, 37};
pd_timing = dataArray{:, 38};
coin1 = dataArray{:, 39};
coin2 = dataArray{:, 40};
coin3 = dataArray{:, 41};
coin4 = dataArray{:, 42};
pd_timing_1 = dataArray{:, 43};
pd_timing_2 = dataArray{:, 44};
pd_timing_3 = dataArray{:, 45};
pd_timing_4 = dataArray{:, 46};
pd_instructions1 = dataArray{:, 47};
egg1 = dataArray{:, 48};
egg2 = dataArray{:, 49};
egg3 = dataArray{:, 50};
egg4 = dataArray{:, 51};
pd_timing_5 = dataArray{:, 52};
pd_timing_6 = dataArray{:, 53};
pd_timing_7 = dataArray{:, 54};
pd_timing_8 = dataArray{:, 55};
pd_instructions2 = dataArray{:, 56};
grater1 = dataArray{:, 57};
grater2 = dataArray{:, 58};
grater3 = dataArray{:, 59};
grater4 = dataArray{:, 60};
pd_timing_9 = dataArray{:, 61};
pd_timing_10 = dataArray{:, 62};
pd_timing_11 = dataArray{:, 63};
pd_timing_12 = dataArray{:, 64};
pd_instructions3 = dataArray{:, 65};
feather1 = dataArray{:, 66};
feather2 = dataArray{:, 67};
feather3 = dataArray{:, 68};
feather4 = dataArray{:, 69};
pd_timing_13 = dataArray{:, 70};
pd_timing_14 = dataArray{:, 71};
pd_timing_15 = dataArray{:, 72};
pd_timing_16 = dataArray{:, 73};
pd_instructions4 = dataArray{:, 74};
camera1 = dataArray{:, 75};
camera2 = dataArray{:, 76};
camera3 = dataArray{:, 77};
camera4 = dataArray{:, 78};
pd_timing_17 = dataArray{:, 79};
pd_timing_18 = dataArray{:, 80};
pd_timing_19 = dataArray{:, 81};
pd_timing_20 = dataArray{:, 82};
pd_instructions5 = dataArray{:, 83};
dolls1 = dataArray{:, 84};
dolls2 = dataArray{:, 85};
dolls3 = dataArray{:, 86};
dolls4 = dataArray{:, 87};
pd_timing_21 = dataArray{:, 88};
pd_timing_22 = dataArray{:, 89};
pd_timing_23 = dataArray{:, 90};
pd_timing_24 = dataArray{:, 91};
pd_instructions6 = dataArray{:, 92};
bear1 = dataArray{:, 93};
bear2 = dataArray{:, 94};
bear3 = dataArray{:, 95};
bear4 = dataArray{:, 96};
pd_timing_25 = dataArray{:, 97};
pd_timing_26 = dataArray{:, 98};
pd_timing_27 = dataArray{:, 99};
pd_timing_28 = dataArray{:, 100};
pd_instructions7 = dataArray{:, 101};
box1 = dataArray{:, 102};
box2 = dataArray{:, 103};
box3 = dataArray{:, 104};
box4 = dataArray{:, 105};
pd_timing_29 = dataArray{:, 106};
pd_timing_30 = dataArray{:, 107};
pd_timing_31 = dataArray{:, 108};
pd_timing_32 = dataArray{:, 109};
pd_Instructions = dataArray{:, 110};
typewriter1 = dataArray{:, 111};
typewriter2 = dataArray{:, 112};
typewriter3 = dataArray{:, 113};
typewriter4 = dataArray{:, 114};
pd_timing_33 = dataArray{:, 115};
pd_timing_34 = dataArray{:, 116};
pd_timing_35 = dataArray{:, 117};
pd_timing_36 = dataArray{:, 118};
pd_instructions8 = dataArray{:, 119};
skate1 = dataArray{:, 120};
skate2 = dataArray{:, 121};
skate3 = dataArray{:, 122};
skate4 = dataArray{:, 123};
pd_timing_37 = dataArray{:, 124};
pd_timing_38 = dataArray{:, 125};
pd_timing_39 = dataArray{:, 126};
pd_timing_40 = dataArray{:, 127};
pd_instructions9 = dataArray{:, 128};
basket1 = dataArray{:, 129};
basket2 = dataArray{:, 130};
basket3 = dataArray{:, 131};
basket4 = dataArray{:, 132};
pd_timing_41 = dataArray{:, 133};
pd_timing_42 = dataArray{:, 134};
pd_timing_43 = dataArray{:, 135};
pd_timing_44 = dataArray{:, 136};
motor_timing_1 = dataArray{:, 137};
motor_timing_2 = dataArray{:, 138};
motor_timing_3 = dataArray{:, 139};
motor_timing_4 = dataArray{:, 140};
motor_instructions = dataArray{:, 141};
motor1 = dataArray{:, 142};
motor2 = dataArray{:, 143};
motor3 = dataArray{:, 144};
motor4 = dataArray{:, 145};
motor5 = dataArray{:, 146};
trails_timing_1 = dataArray{:, 147};
trails_timing_2 = dataArray{:, 148};
trails_timing_3 = dataArray{:, 149};
trails_timing_4 = dataArray{:, 150};
trails_instructions = dataArray{:, 151};
trails = dataArray{:, 152};
ws_inst = dataArray{:, 153};
ws_img_1 = dataArray{:, 154};
ws_img_2 = dataArray{:, 155};
ws_img_3 = dataArray{:, 156};
ws_img_4 = dataArray{:, 157};
ws_img_5 = dataArray{:, 158};
ws_img_6 = dataArray{:, 159};
ws_img_7 = dataArray{:, 160};
ws_img_8 = dataArray{:, 161};
ws_img_9 = dataArray{:, 162};
ws_img_10 = dataArray{:, 163};
ws_img_11 = dataArray{:, 164};
ws_img_12 = dataArray{:, 165};
ws_img_timing_1 = dataArray{:, 166};
ws_img_timing_2 = dataArray{:, 167};
ws_img_timing_3 = dataArray{:, 168};
ws_img_timing_4 = dataArray{:, 169};
ws_ans_1 = dataArray{:, 170};
ws_ans_2 = dataArray{:, 171};
ws_ans_3 = dataArray{:, 172};
ws_ans_4 = dataArray{:, 173};
ws_ans_5 = dataArray{:, 174};
ws_ans_6 = dataArray{:, 175};
ws_ans_7 = dataArray{:, 176};
ws_ans_8 = dataArray{:, 177};
ws_ans_9 = dataArray{:, 178};
ws_ans_10 = dataArray{:, 179};
ws_ans_11 = dataArray{:, 180};
ws_ans_12 = dataArray{:, 181};
ws_ans_timing_1 = dataArray{:, 182};
ws_ans_timing_2 = dataArray{:, 183};
ws_ans_timing_3 = dataArray{:, 184};
ws_ans_timing_4 = dataArray{:, 185};
ws_1_solution = dataArray{:, 186};
ws_2_solution = dataArray{:, 187};
ws_3_solution = dataArray{:, 188};
ws_4_solution = dataArray{:, 189};
ws_5_solution = dataArray{:, 190};
ws_6_solution = dataArray{:, 191};
ws_7_solution = dataArray{:, 192};
ws_8_solution = dataArray{:, 193};
ws_9_solution = dataArray{:, 194};
ws_10_solution = dataArray{:, 195};
ws_11_solution = dataArray{:, 196};
ws_12_solution = dataArray{:, 197};
ws_solution_timing_1 = dataArray{:, 198};
ws_solution_timing_2 = dataArray{:, 199};
ws_solution_timing_3 = dataArray{:, 200};
ws_solution_timing_4 = dataArray{:, 201};
motor_timing_2_1 = dataArray{:, 202};
motor_timing_2_2 = dataArray{:, 203};
motor_timing_2_3 = dataArray{:, 204};
motor_timing_2_4 = dataArray{:, 205};
motor_instructions1 = dataArray{:, 206};
motor6 = dataArray{:, 207};
motor7 = dataArray{:, 208};
motor8 = dataArray{:, 209};
motor9 = dataArray{:, 210};
motor10 = dataArray{:, 211};
pr_timing_1 = dataArray{:, 212};
pr_timing_2 = dataArray{:, 213};
pr_timing_3 = dataArray{:, 214};
pr_timing_4 = dataArray{:, 215};
box_recall = dataArray{:, 216};
typewriter_recall = dataArray{:, 217};
skate_recall = dataArray{:, 218};
basket_recall = dataArray{:, 219};
bear_recall = dataArray{:, 220};
dolls_recall = dataArray{:, 221};
camera_recall = dataArray{:, 222};
feather_recall = dataArray{:, 223};
grater_recall = dataArray{:, 224};
egg_recall = dataArray{:, 225};
coin_recall = dataArray{:, 226};
compass_recall = dataArray{:, 227};
LocationLatitude = dataArray{:, 228};
LocationLongitude = dataArray{:, 229};
LocationAccuracy = dataArray{:, 230};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

ResponseID = V1;
StartDate = V8;
EndDate = V9;

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Word Search: parse the Qualtrics data to determine which word search was
%% and determine if the correct answer was chosen

% Get the column names in the Qualtrics spreadsheet
colnames = whos;

% Set up an array to hold the displayed words 
displayed = zeros(size(ResponseID));
% Loop through all the column names
for c = 1 : numel(colnames)
    % Look for columns that are associated with the displayed word search.
    % They start with 'ws_img_' but skip ones that also include 'timing.'
    % We just want the displayed word search 
    if strfind(colnames(c).name, 'ws_img_') ...
        & isempty(strfind(colnames(c).name, 'timing'))
        % From the column name, get the number of the word search
        % possibility (1 - 12)
        wsnum = str2double(regexprep(colnames(c).name,'ws_img_',''));
        % get the content of the current column
        colvals = eval(colnames(c).name);
        % replace any NaN's with 0
        colvals(isnan(colvals)) = 0;
        % loop through all the rows of the column. There will be one row
        % for each survey response
        for r = 1 : length(colvals)
            % if that row number is 1, this word search was displayed for
            % that particular survey response
            if colvals(r) == 1
                displayed(r) = wsnum;
            end
        end
    end
end

% Now set up an array to hold the word search answers
answers = zeros(size(ResponseID));
% Again loop through all the columns
for c = 1 : numel(colnames)
    % Find columns containing 'ws_ans_' but not 'timing'
    if strfind(colnames(c).name, 'ws_ans_') ...
        & isempty(strfind(colnames(c).name, 'timing'))
        % get all rows for this column
        colvals = eval(colnames(c).name);
        colvals(isnan(colvals)) = 0;
        % sum up the column values. For most, this will be zero except for
        % the column associated with the answer for the displayed word
        % search. The answer will be either 0 (incorrect) or 1 (correct)
        answers = answers + colvals;
    end
end
% Create array to hold correct vs incorrect values
correct = cell(size(ResponseID));
% Detemine if the selected answer was correct or incorrect
for a = 1:length(answers)
    if answers(a) == 1
        correct{a} = 'true';
    else
        correct{a} = 'false';
    end
end

% We determined the index value of the word displayed. Now match that up to
% our list of possible words. 
% Possible words that could be displayed in the word search
words = {'CHERRY', 'PEAR', 'BEET', 'CARROT', 'LIGHTNING', 'WINDY', ...
    'GORILLA', 'ORANGUTAN', 'ELEVATOR', 'BICYCLE', 'BIRCH', 'PLUM'};
wordsDisplayed = cell(size(ResponseID));
% Collect the word displayed in a cell array to be written to the Excel
% spreadsheet
for d = 1 : length(displayed)
    if displayed(d) > 0
        wordsDisplayed{d} = words{displayed(d)};
    else
        wordsDisplayed{d} = 'Survey not complete';
    end
end
% Create a cell array of the subject IDs just to make xlswrite happy
Subject = cell(size(ResponseID));
for s = 1 : length(Subject)
    Subject{s} = SubjectID(s);
end

% Now find the OADC numbers for each Subject ID
OADC = cell(size(ResponseID));
dates = cell(size(ResponseID));
for s = 1 : length(SubjectID);
    subjectId = SubjectID(s); 
    if isnan(subjectId)
        OADC{s} = 0;
    else
        query = ['select OADC from subjects_new.subjects where idx = '  num2str(subjectId) ]; 
        OADC{s} = mysql(query);
    end
    % Save dates in a cell array to make xlswrite happy
    dates{s} = datestr(StartDate(s));
end

% Save all out output to a cell matrix for writing to a spreadsheet
output = [OADC, Subject, ResponseID, dates, wordsDisplayed, correct];
% Choose a filename to save to
[file, path] = uiputfile('*.xlsx', 'Save file name');
filename = fullfile(path, file);
% Write to the first sheet of the spreadsheet
sheet = 'Word Search';
% Create column labels
labels = {'OADC', 'SubjectID', 'ResponseID', 'Date', 'Word Displayed', 'Correct'};
xlswrite(filename, labels, sheet, 'A1');
% Write the data to the spreadsheet
for r = 2 : length(output)+1
    startCell = ['A' num2str(r)];
    row = output(r-1, :);
    xlswrite(filename, row, sheet, startCell);
end
disp('Word search data written')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Memory task: the memory task consists of a picture displayed at the beginning
% of the survey and a question at the end of the survey asking the user to
% choose the picture displayed from four possible choices

% Names of pictures that could possibly be displayed
picturetypes = {'compass', 'coin', 'egg', 'grater', 'feather', 'camera', ...
    'dolls', 'bear', 'box', 'typewriter', 'skate', 'basket'};
% Set up an array to hold a code generated for each column of pictures
numRows = length(ResponseID);
picturedisplayed = {};
displaycode = zeros(numRows,1);
% Get names of columns from the spreadsheet
colnames = whos;

% factor is used to generate a unique number for each column of pictures
factor = 2;
% Loop over all the possible pictures
for p = 1 : length(picturetypes) 
    % factor is used for generating unique code for each picture
    factor = factor * 2;
    for c = 1 : numel(colnames)
        picturetype = picturetypes{p};
        % find the column associated with this picture type
        % since one of the picture types is 'box' we need to exclude
        % columns containing 'textboxes
        % we'll also exclude the 'recall' columns, of which there is one
        % for each picture type to hold answerrs
        if strfind(colnames(c).name, picturetype)
            if isempty(strfind(colnames(c).name, 'recall')) ... 
                    & isempty(strfind(colnames(c).name, 'textboxes'))
                % Each of the possible answers is numbered 1 - 4. Use these
                % numbers as part of generating a unique code for each
                % possible answer
                add = str2double(regexprep(colnames(c).name,picturetype,''));
                code = factor+add;
                % get all the rows for a given column
                colvals = eval(colnames(c).name);
                colvals(isnan(colvals)) = 0;
                displaypic{code} = colnames(c).name;
                % record the code for the image that wass displayed
                displaycode = displaycode + code*colvals;  
            end
        end  
    end
end

% figure out which was displayed
clear displayed
for n = 1 : length(displaycode)
    if displaycode(n) > 0
        displayed{n} = displaypic{displaycode(n)};
    else
        displayed{n} = displaypic{displaycode(1)};
    end
end
% Check the 'recall' column to determine which picture was chosen out of
% the four options
chosen = cell(size(ResponseID));
for p = 1 : length(picturetypes) 
    for c = 1 : numel(colnames)
        picturetype = picturetypes{p};
        if strfind(colnames(c).name, [picturetype '_recall'])
            colvals = eval(colnames(c).name);
            for n = 1 : length(colvals)
                if ~isnan(colvals(n)) 
                    if colvals(n) == 100
                        chosen{n} = 'None of these';
                    elseif colvals(n) == 101
                        chosen{n} = 'I don''t remember seeing a picture';
                    else
                        chosen{n} = [picturetype num2str(colvals(n))];
                    end
                end
            end
        end  
    end
end
% Check if the chosen answer was correct or not
match = cell(size(ResponseID));
for n = 1 : length(chosen)
    if strcmp(chosen{n}, displayed{n})
        match{n} = 'true';
    else
        match{n} = 'false';
    end
end

% Save subject IDs as a cell array to make xlswrite happy
Subject = cell(size(ResponseID));
for s = 1 : length(Subject)
    Subject{s} = SubjectID(s);
end

% Get an OADC number for each subject number
OADC = cell(size(ResponseID));
dates = cell(size(ResponseID));
for s = 1 : length(SubjectID);
    subjectId = SubjectID(s); 
    if isnan(subjectId)
        OADC{s} = 0;
    else
        query = ['select OADC from subjects_new.subjects where idx = '  num2str(subjectId) ]; 
        OADC{s} = mysql(query);
    end
    % Save date in a cell to make xlswrite happy
    dates{s} = datestr(StartDate(s));
end
% Save data as a cell matrix to write to spreadsheet
output = [OADC, Subject, ResponseID, dates, displayed', chosen, match];

% Write to the second sheet of the spreadsheet
sheet = 'Memory Task';
% Create column labels
labels = {'OADC', 'SubjectID', 'ResponseID', 'Date', 'Picture Displayed', 'Picture Chosen', 'Correct'};
xlswrite(filename, labels, sheet, 'A1');
% Write the data to the spreadsheet

for r = 2 : length(output)+1
    startCell = ['A' num2str(r)];
    row = output(r-1, :);
    xlswrite(filename, row, sheet, startCell);
end
disp('Memory task data written')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Trails Times
% This sheet will be the total amount of time spent on the trails test task
% loop through all the OADC numbers

% Set up cell arrays to make xlswrite happy
OADC = cell(size(ResponseID));
dates = cell(size(ResponseID));
subjId = cell(size(ResponseID));
trailtimes = cell(size(ResponseID));
% subtract trails times from the Qualtrics raw daya to get the total time
% spent on the trails task n
trails_times = trails_timing_2 - trails_timing_1;
% Loop through subject ids, getting OADC numbers and writing the rest of
% the data in the cell arrays
for s = 1 : length(SubjectID);
    subjectId = SubjectID(s); 
    if isnan(subjectId)
        OADC{s} = 0;
    else
        query = ['select OADC from subjects_new.subjects where idx = '  num2str(subjectId) ]; 
        OADC{s} = mysql(query);
    end
    dates{s} = datestr(StartDate(s));
    subjId{s} = SubjectID(s);
    trailtimes{s} = trails_times(s);
end

% Write the data to a new sheet in the spreadsheet
output = [OADC, subjId, ResponseID, dates, trailtimes];
sheet = 'Trails Task Time';
% Label the spreadsheet columns
row = {'OADC', 'SubjectID', 'ResponseID', 'StartDate', 'TrailTimes'};
xlswrite(filename, row, sheet, 'A1');
for r = 1 : length(output)
    startCell = ['A' num2str(r+1)];
    row = output(r, :);
    xlswrite(filename, row, sheet, startCell);
end
disp('Trails times data written');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Mouse metrics

clear output

% get OADC numbers 
% loop through all the OADC numbers

% Subject IDs are loaded from spreadsheet of survey results
del = isnan(SubjectID);
SubjectID(del) = [];
StartDate(del) = [];
subjectIds = unique(SubjectID);

index = 1;

% set up indices to hold total times for each subject's trails test
trailsTimes = [];
trailsOADC = [];
trailsDate = [];

% loop through the subject ids
for s = 1 : length(SubjectID);
    subjectId = SubjectID(s); 
    disp(['Subject ID ' num2str(subjectId)])
    query = ['select OADC from subjects_new.subjects where idx = '  num2str(subjectId) ]; 
    OADC = mysql(query);
    date = StartDate(s);
    disp(['OADC ' num2str(OADC)])
    % Set up arrays to hold values
    imagehovervalues = [];
    mousex = [];
    mousey = [];
    mousebutton = [];
    textboxactive = [];
    stamp = [];
    mousebuttondown = []; % this equals 0 when mouse button is released
    textbox = [];
    % the data is pulled down in 5,000 line pages. Keep pulling down data
    % until the last page flag is true
    page = 1;
    lastpage = 0;
    
    while lastpage == 0
        % Get a page of data
        mousedate = '201612';
        urltext=['https://juno.orcatech.org/php/healthforms/loadFormsUserInputBySubjIdSurveyIdYearMonth.php?s=' ...
            num2str(subjectId) '&ym=' mousedate '&p=' num2str(page) '&sv=8wEcKa486I0Jenj'];
        rawdata = urlread(urltext);

        % the raw data is formatted as a Matlab struct. Read the struct
        try
            structContents = eval(rawdata);
        % occasionally the data is corrupted - toss cases that don't work
        catch
            disp([ num2str(subjectId) ' did not work'])
            lastpage = 2;
            continue;
        end
        % collect the data from the struct
        for i = 1:length(structContents.data)
            imagehovervalues = [imagehovervalues structContents.data(i).imagehover];
            mousex = [mousex structContents.data(i).mousex];
            mousey = [mousey structContents.data(i).mousey];
            mousebutton = [mousebutton structContents.data(i).mousebutton];
            mousebuttondown = [mousebuttondown structContents.data(i).mousebuttondown];
            stamp = [stamp structContents.data(i).stamp];
            % 1 when entering, 0 when leaving, otherwise -1
            textboxactive = [textboxactive structContents.data(i).textboxactive];
            % string when textbox active is one or zero
            structContents.data(i).textboxactive;
            if structContents.data(i).textboxactive > -1
                structContents.data(i).textbox;
            end
            textbox = [textbox structContents.data(i).textbox];
        end
        page = page + 1; 
        lastpage = structContents.lastpage;
    end
    % find the indices of mouse clicks
    clicks = find(mousebuttondown == 0);

    % find when the cursor enters then leaves the trails image
    currentImOne = find(imagehovervalues == 1);
    currentImZero = find(imagehovervalues == 0);
    
    if ~isempty(currentImOne) & ~isempty(currentImZero)
        % the trails are marked by the first image hover value == 1 and the
        % last value == 0
        trails = currentImOne(1):currentImZero(end);
        trailsClicks = intersect(trails, clicks);
        % group the mouse positions into movements separated by clicks
        totalTrailsTime = 0;
        for c = 2:length(trailsClicks)
            section = trailsClicks(c-1):trailsClicks(c);
            %plot(mousex(section), mousey(section))
            % does the mouse cursor info contain -1?
            containsNegOne = 0;
            if min(mousex(section)) == -1
                containsNegOne = 1;
            end
            if containsNegOne == 0
                % calculate statistics
                % straight line distance
                dx = mousex(section(end)) - mousex(section(1));
                dy = mousey(section(end)) - mousey(section(1));
                Delta = sqrt(dx^2 + dy^2);
                % actual distance traveled
                dx2 = diff(mousex(section));
                dy2 = diff(mousey(section));
                D = sum(sqrt(dx2.^2 + dy2.^2));
                % curvature
                K = Delta/D;
                % K = (straight line distance)/(actual distance traveled)
                % time elapsed
                T = stamp(section(end)) - stamp(section(1));
        
                % SUM UP MOUSE TIMES TO GET TOTAL TRAILS TIME
                totalTrailsTime = totalTrailsTime + T;
                
                if Delta > 0
                output(index).Delta = Delta;
                output(index).D = D;
                output(index).K = K;
                output(index).T = T;
                output(index).OADC = OADC;
                output(index).date = date;
                output(index).subjectId = subjectId;
                output(index).numClicks = length(trailsClicks);
                index = index+ 1;
                end
                % pause from the moment of the 
                pause = stamp(section(2)) - stamp(section(1));
            end
        end
    end
end

sheet = 'Mouse Metrics';
allD = [];
allDelta = [];
allK = [];
allT = [];
allOADC = [];
allNumClicks = [];

row = {'OADC', 'Subject Id', 'Date', 'Delta', 'D', 'K', 'Time', 'Total Number of Clicks'};
xlswrite(filename, row, sheet, 'A1');
for n = 1 : length(output)
    startCell = ['A' num2str(n+1)];
    Delta = output(n).Delta;
    D = output(n).D;
    K = output(n).K;
    T = output(n).T;
    numClicks = output(n).numClicks;
    allD = [allD D];
    allDelta = [allDelta Delta];
    allK = [allK K];
    allT = [allT T];
    OADC = output(n).OADC;
    subjectId = output(n).subjectId;
    allOADC = [allOADC OADC];
    allNumClicks = [allNumClicks numClicks];
    date = output(n).date;
    row = {OADC, subjectId, datestr(date), Delta, D, K, T, numClicks};
    xlswrite(filename, row, sheet, startCell);
end
disp('Mouse metrics written')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Typing errors
answer1 = 'the sun rises in the east';
answer2 = 'did you have a good time';
answer3 = 'space is a high priority';
answer4 = 'you are a wonderful example';
answer5 = 'what you see is what you get';
answer6 = 'do not say anything';
answer7 = 'all work and no play';
answer8 = 'hair gel is very greasy';
answer9 = 'the dreamers of dreams';
answer10 = 'all together in one big pile';

% Capitalization and punctuation are not considered in calculating typing
% errors
for n = 1 : length(motor1)
    motor1{n} = lower(motor1{n});
    motor1{n} = regexprep(motor1{n}, '\.', '');
    motor1{n} = regexprep(motor1{n}, '?', '');
    motor1{n} = regexprep(motor1{n}, '!', '');
    motor1{n} = regexprep(motor1{n}, ',', '');
    if isempty(motor1{n})
        numErrors1(n) = NaN;
    else
        numErrors1(n) = MinimumStringDistance(answer1, motor1{n});
    end
end

for n = 1 : length(motor2)
    motor2{n} = lower(motor2{n});
    motor2{n} = regexprep(motor2{n}, '\.', '');
    motor2{n} = regexprep(motor2{n}, '?', '');
    motor2{n} = regexprep(motor2{n}, '!', '');
    motor2{n} = regexprep(motor2{n}, ',', '');
    if isempty(motor2{n})
        numErrors2(n) = NaN;
    else
        numErrors2(n) = MinimumStringDistance(answer2, motor2{n});
    end
end

for n = 1 : length(motor3)
    motor3{n} = lower(motor3{n});
    motor3{n} = regexprep(motor3{n}, '\.', '');
    motor3{n} = regexprep(motor3{n}, '?', '');
    motor3{n} = regexprep(motor3{n}, '!', '');
    motor3{n} = regexprep(motor3{n}, ',', '');
    if isempty(motor3{n})
        numErrors3(n) = NaN;
    else
        numErrors3(n) = MinimumStringDistance(answer3, motor3{n});
    end
end

for n = 1 : length(motor4)
    motor4{n} = lower(motor4{n});
    motor4{n} = regexprep(motor4{n}, '\.', '');
    motor4{n} = regexprep(motor4{n}, '?', '');
    motor4{n} = regexprep(motor4{n}, '!', '');
    motor4{n} = regexprep(motor4{n}, ',', '');
    if isempty(motor4{n})
        numErrors4(n) = NaN;
    else
        numErrors4(n) = MinimumStringDistance(answer4, motor4{n});
    end
end

for n = 1 : length(motor5)
    motor5{n} = lower(motor5{n});
    motor5{n} = regexprep(motor5{n}, '\.', '');
    motor5{n} = regexprep(motor5{n}, '?', '');
    motor5{n} = regexprep(motor5{n}, '!', '');
    motor5{n} = regexprep(motor5{n}, ',', '');
    if isempty(motor5{n})
        numErrors5(n) = NaN;
    else
        numErrors5(n) = MinimumStringDistance(answer5, motor5{n});
    end
end

for n = 1 : length(motor6)
    motor6{n} = lower(motor6{n});
    motor6{n} = regexprep(motor6{n}, '\.', '');
    motor6{n} = regexprep(motor6{n}, '?', '');
    motor6{n} = regexprep(motor6{n}, '!', '');
    motor6{n} = regexprep(motor6{n}, ',', '');
    if isempty(motor6{n})
        numErrors6(n) = NaN;
    else
        numErrors6(n) = MinimumStringDistance(answer6, motor6{n});
    end
end

for n = 1 : length(motor7)
    motor7{n} = lower(motor7{n});
    motor7{n} = regexprep(motor7{n}, '\.', '');
    motor7{n} = regexprep(motor7{n}, '?', '');
    motor7{n} = regexprep(motor7{n}, '!', '');
    motor7{n} = regexprep(motor7{n}, ',', '');
    if isempty(motor7{n})
        numErrors7(n) = NaN;
    else
        numErrors7(n) = MinimumStringDistance(answer7, motor7{n});
    end
end

for n = 1 : length(motor8)
    motor8{n} = lower(motor8{n});
    motor8{n} = regexprep(motor8{n}, '\.', '');
    motor8{n} = regexprep(motor8{n}, '?', '');
    motor8{n} = regexprep(motor8{n}, '!', '');
    motor8{n} = regexprep(motor8{n}, ',', '');
    if isempty(motor8{n})
        numErrors8(n) = NaN;
    else
        numErrors8(n) = MinimumStringDistance(answer8, motor8{n});
    end
end

for n = 1 : length(motor9)
    motor9{n} = lower(motor9{n});
    motor9{n} = regexprep(motor9{n}, '\.', '');
    motor9{n} = regexprep(motor9{n}, '?', '');
    motor9{n} = regexprep(motor9{n}, '!', '');
    motor9{n} = regexprep(motor9{n}, ',', '');
    if isempty(motor9{n})
        numErrors9(n) = NaN;
    else
        numErrors9(n) = MinimumStringDistance(answer9, motor9{n});
    end
end

for n = 1 : length(motor10)
    motor10{n} = lower(motor10{n});
    motor10{n} = regexprep(motor10{n}, '\.', '');
    motor10{n} = regexprep(motor10{n}, '?', '');
    motor10{n} = regexprep(motor10{n}, '!', '');
    motor10{n} = regexprep(motor10{n}, ',', '');
    if isempty(motor10{n})
        numErrors10(n) = NaN;
    else
        numErrors10(n) = MinimumStringDistance(answer10, motor10{n});
    end
end

% loop through all the OADC numbers
OADC = cell(size(ResponseID));
dates = cell(size(ResponseID));
subjId = cell(size(ResponseID));
err1 = cell(size(ResponseID));
err2 = cell(size(ResponseID));
err3 = cell(size(ResponseID));
err4 = cell(size(ResponseID));
err5 = cell(size(ResponseID));
err6 = cell(size(ResponseID));
err7 = cell(size(ResponseID));
err8 = cell(size(ResponseID));
err9 = cell(size(ResponseID));
err10 = cell(size(ResponseID));
for s = 1 : length(SubjectID);
    subjectId = SubjectID(s); 
    if isnan(subjectId)
        OADC{s} = 0;
    else
        query = ['select OADC from subjects_new.subjects where idx = '  num2str(subjectId) ]; 
        OADC{s} = mysql(query);
    end
    dates{s} = datestr(StartDate(s));
    subjId{s} = SubjectID(s);
    err1{s} = numErrors1(s);
    err2{s} = numErrors2(s);
    err3{s} = numErrors3(s);
    err4{s} = numErrors4(s);
    err5{s} = numErrors5(s);
    err6{s} = numErrors6(s);
    err7{s} = numErrors7(s);
    err8{s} = numErrors8(s);
    err9{s} = numErrors9(s);
    err10{s} = numErrors10(s);
end

output = [OADC, subjId, ResponseID, dates, err1, err2, err3, err4, err5, ...
    err6, err7, err8, err9, err10];

sheet = 'Typing Errors';
row = {'OADC', 'SubjectID', 'ResponseID', 'StartDate', 'Motor1Err', 'Motor2Err', ...
    'Motor3Err', 'Motor4Err', 'Motor5Err', 'Motor6Err', 'Motor7Err', 'Motor8Err', ...
    'Motor9Err', 'Motor10Err'};
xlswrite(filename, row, sheet, 'A1');
for r = 1 : length(output)
    startCell = ['A' num2str(r+1)];
    row = output(r, :);
    xlswrite(filename, row, sheet, startCell);
end

disp('Typing errors written')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Typing times
%%% Word counts for the text box answers
wordcount(1) = 6;
workcount(2) = 6;
wordcount(3) = 5;
wordcount(4) = 5;
wordcount(5) = 7;
wordcount(6) = 4;
wordcount(7) = 5;
wordcount(8) = 5;
wordcount(9) = 4;
wordcount(10) = 6;

%%% Character counts for the text box answers
charcount(1) = 25;
charcount(2) = 24;
charcount(3) = 24;
charcount(4) = 27;
charcount(5) = 28;
charcount(6) = 19;
charcount(7) = 20;
charcount(8) = 23;
charcount(9) = 22;
charcount(10) = 28;

del = isnan(SubjectID);
SubjectID(del) = [];
StartDate(del) = [];

allT = [];
allSubject = [];
allDate = [];
allResponseID = [];
allTextbox = [];
allWPM = [];
allCPM = [];
for s = 1 : length(SubjectID);
    subjectId = SubjectID(s);
    thisdate = StartDate(s);
    response = ResponseID(s);
    % set up arrays to hold textbox status and time stamp values
    stamp = [];
    textbox = [];
    t = 1;
    % the data is pulled down in 5,000 line pages. Keep pulling down data
    % until the last page flag is true
    page = 1;
    lastpage = 0;
    while lastpage == 0
        %urltext= ['https://juno.orcatech.org/php/healthforms/loadFormsUserInputBySubjIdSurveyIdYearMonth.php?s=' num2str(subjectId) '&ym=201611&p=' num2str(page) '&sv=8wEcKa486I0Jenj']
        urltext1= 'https://juno.orcatech.org/php/healthforms/loadFormsUserInputBySubjIdYearMonth.php?s=';
        urltext2 = [num2str(subjectId) '&ym=201611&p=' num2str(page)];
        urltext = [urltext1 urltext2];
        rawdata = urlread(urltext);
        
        % the raw data is formatted as a Matlab struct. Read the struct
        try
            structContents = eval(rawdata);
        catch
            disp([ num2str(subjectId) ' did not work'])
            lastpage = 2;
            continue
        end
        % collect the data from the struct
        for i = 1:length(structContents.data)
            stamp = [stamp structContents.data(i).stamp];
            textbox{t} = structContents.data(i).textbox;
            t = t + 1;
        end
        page = page + 1; 
        lastpage = structContents.lastpage;
    end
    % There are up to ten text boxes with start and stop times recorded
    % Set up an array to hold these possible values
    for i = 1 : 10
        textarray(i).times = 0;
        textarray(i).wordcount = wordcount(i);
        textarray(i).charcount = charcount(i);
    end
    
    % Loop through all the rows of data for this survey
    for i = 1 : length(textbox)
        % if a text box was active, the textbox value will not be equal to
        % -1. It will contain the label of the active text box, such as
        % 'motor1'
        
        if strcmp(textbox{i}, '-1') == 0
            textbox{i}
            index = str2double(strrep(textbox{i}, 'motor', ''));
            if ~isnan(index)
                textarray(index).times = [textarray(index).times stamp(i)];
            end
        end
    end
    
    % Loop through the array of collected time stamps
    for i = 1 : 10
        % get the collected time stamps for a certain text box
        times = textarray(i).times;
        % each list will have at least one value, since we seeded the array
        % with zeros before collecting values. Ideally, the box should then
        % three values - the zero, the start time and end time. If we have
        % the right number of values, calculate the typing time
        if length(times) >= 3
            textarray(i).typingtime = times(3) - times(2);
            disp(['Typing time for box ' num2str(i) ' and subject ' num2str(subjectId) ': ' num2str(times(3) - times(2))])
            allT = [allT times(3) - times(2)];
            allSubject = [allSubject subjectId];
            allDate = [allDate thisdate];
            allResponseID = [allResponseID response];
            allTextbox = [allTextbox i];
            minutes = (times(3) - times(2))/60;
            if minutes > 0
                wpm = textarray(i).wordcount / minutes;
                cpm = textarray(i).charcount / minutes;
            else
                wpm = 0;
                cpm = 0;
            end
            allWPM = [allWPM wpm];
            allCPM = [allCPM cpm];
            % sometimes a value isn't captured for the start or end of typing.
        % In that case, save a NaN value for this text box.
        else
            textarray(i).typingtime = NaN;
        end
    end
end

OADC = cell(size(allSubject));

for s = 1 : length(allSubject);
    subjectId = allSubject(s); 
    if isnan(subjectId)
        OADC{s} = 0;
    else
        query = ['select OADC from subjects_new.subjects where idx = '  num2str(subjectId) ]; 
        OADC{s} = mysql(query);
    end
end

sheet = 'Typing Times';
row = {'OADC', 'SubjectID', 'ResponseID', 'Typing Time', 'Date', 'Textbox', 'Words per Minute', 'Chars per Minute'};
xlswrite(filename, row, sheet, 'A1');
for t = 1 : length(allT)
    startCell = ['A' num2str(t+1)];
    row = {OADC{t}, allSubject(t), allResponseID{t}, allT(t), allDate{t}, allTextbox(t), allWPM(t), allCPM(t)};
    xlswrite(filename, row, sheet, startCell);
end

disp('Typing errors written')

%% Close the MySQL connection
mysql('close')