%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\Users\dunch\Documents\MATLAB\Mouse\pilot.xlsx
%    Worksheet: pilot
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2016/11/08 12:42:26

%% Import the data
[~, ~, raw0_0] = xlsread('C:\Users\dunch\Documents\MATLAB\Mouse\pilot.xlsx','pilot','EL1:EP');
[~, ~, raw0_1] = xlsread('C:\Users\dunch\Documents\MATLAB\Mouse\pilot.xlsx','pilot','GQ1:GU35');
[~, ~, raw0_1] = xlsread('C:\Users\dunch\Documents\MATLAB\Mouse\pilot.xlsx','pilot','GQ1:GU35');
raw = [raw0_0,raw0_1];
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
cellVectors = raw(:,[1,2,3,4,5,6,7,8,9,10]);

%% Allocate imported array to column variable names
motor1 = cellVectors(:,1);
motor2 = cellVectors(:,2);
motor3 = cellVectors(:,3);
motor4 = cellVectors(:,4);
motor5 = cellVectors(:,5);
motor6 = cellVectors(:,6);
motor7 = cellVectors(:,7);
motor8 = cellVectors(:,8);
motor9 = cellVectors(:,9);
motor10 = cellVectors(:,10);

%% Clear temporary variables
clearvars data raw raw0_0 raw0_1 cellVectors;

answer1 = 'the sun rises in the east';
answer2 = 'did you have a good time';
answer3 = 'space is a high priority';
answer4 = 'you are a wonderful example';
answer5 = 'what you see is what you get';
answer6 = 'do not say anything';
answer7 = 'all work and no play';
answer8 = 'hair gel is very greasy';
answer9 = 'the dreamers of dreams';
answer10 = 'all together in one big pile';

for n = 2 : length(motor1)
    if isempty(motor1{n})
        numErrors1(n-1) = NaN;
    else
        numErrors1(n-1) = MinimumStringDistance(answer1, motor1{n});
    end
end

for n = 2 : length(motor2)
    if isempty(motor2{n})
        numErrors2(n-1) = NaN;
    else
        numErrors2(n-1) = MinimumStringDistance(answer2, motor2{n});
    end
end

for n = 2 : length(motor3)
    if isempty(motor3{n})
        numErrors3(n-1) = NaN;
    else
        numErrors3(n-1) = MinimumStringDistance(answer3, motor3{n});
    end
end

for n = 2 : length(motor4)
    if isempty(motor4{n})
        numErrors4(n-1) = NaN;
    else
        numErrors4(n-1) = MinimumStringDistance(answer4, motor4{n});
    end
end

for n = 2 : length(motor5)
    if isempty(motor5{n})
        numErrors5(n-1) = NaN;
    else
        numErrors5(n-1) = MinimumStringDistance(answer5, motor5{n});
    end
end

for n = 2 : length(motor6)
    if isempty(motor6{n})
        numErrors6(n-1) = NaN;
    else
        numErrors6(n-1) = MinimumStringDistance(answer6, motor6{n});
    end
end

for n = 2 : length(motor7)
    if isempty(motor7{n})
        numErrors7(n-1) = NaN;
    else
        numErrors7(n-1) = MinimumStringDistance(answer7, motor7{n});
    end
end

for n = 2 : length(motor8)
    if isempty(motor8{n})
        numErrors8(n-1) = NaN;
    else
        numErrors8(n-1) = MinimumStringDistance(answer8, motor8{n});
    end
end

for n = 2 : length(motor9)
    if isempty(motor9{n})
        numErrors9(n-1) = NaN;
    else
        numErrors9(n-1) = MinimumStringDistance(answer9, motor9{n});
    end
end

for n = 2 : length(motor10)
    if isempty(motor10{n})
        numErrors10(n-1) = NaN;
    else
        numErrors10(n-1) = MinimumStringDistance(answer10, motor10{n});
    end
end

